import { useRef, useEffect, useState } from 'react';
import { useFrame, useThree } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import * as THREE from 'three';

/**
 * Component for the XBotModel 3D model
 * Generated by fbx2glb from XBot.fbx
 * 
 * Animations: 'Idle', 'Walk', 'Run', 'Jump', 'Dance'
 * Has skeleton, root bone: 'Hips'
 * Meshes: 1
 */
export function XBotModel({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = [1, 1, 1],
  animation = 'Idle',
  animationSpeed = 1.0,
  debug = false,
  ...props
}) {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/XBot.glb');
  const { actions, names } = useAnimations(animations, group);
  const [currentAnimation, setCurrentAnimation] = useState(animation);

  // Handle animation changes
  useEffect(() => {
    if (!actions || Object.keys(actions).length === 0) return;

    // Stop any playing animations
    Object.values(actions).forEach(action => action?.stop());

    // If animation is defined and exists, play it
    if (currentAnimation && actions[currentAnimation]) {
      const action = actions[currentAnimation];
      action.reset().play();
      action.setEffectiveTimeScale(animationSpeed);

      if (debug) {
        console.log(`Playing animation: ${currentAnimation}`);
      }
    }

    return () => {
      // Cleanup animations on unmount
      Object.values(actions).forEach(action => action?.stop());
    };
  }, [actions, currentAnimation, animationSpeed, debug]);

  // Update animation speed when it changes
  useEffect(() => {
    if (!actions || !currentAnimation || !actions[currentAnimation]) return;
    actions[currentAnimation].setEffectiveTimeScale(animationSpeed);
  }, [animationSpeed, actions, currentAnimation]);

  // Change animation
  const setAnimation = (animName) => {
    if (animName && actions && actions[animName]) {
      setCurrentAnimation(animName);
    }
  };

  // Debug output when the component mounts
  useEffect(() => {
    if (debug) {
      console.log('Model loaded:', scene);
      console.log('Available animations:', names);
      console.log('Animation actions:', actions);
    }

    // Preload the model
    return () => {
      // Cleanup on unmount
    };
  }, [scene, animations, actions, names, debug]);

  return (
    <group ref={group} position={position} rotation={rotation} scale={scale} {...props}>
      <primitive object={scene} />
    </group>
  );
}

// Add animation control methods to the component
XBotModel.setAnimation = (group, animName) => {
  if (!group.current) return;
  const actions = group.current._currentActions;
  if (actions && actions[animName]) {
    // Stop all current animations
    Object.values(actions).forEach(action => action?.stop());
    // Play the requested animation
    actions[animName].reset().play();
  }
};

// List available animations
XBotModel.animations = ['Idle', 'Walk', 'Run', 'Jump', 'Dance'];

// Preload the model
useGLTF.preload('/models/XBot.glb');
